<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>lol.maki.lab</groupId>
	<artifactId>hello-world</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>hello-world</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>1.8</java.version>
		<spring-native.version>0.9.2-SNAPSHOT</spring-native.version>
		<jar-classifier></jar-classifier>
		<start-class>lol.maki.lab.HelloWorldApplication</start-class>
		<functionResourceGroup>hello-native-world</functionResourceGroup>
		<functionAppName>hello-native-world</functionAppName>
		<functionAppRegion>japaneast</functionAppRegion>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.experimental</groupId>
			<artifactId>spring-native</artifactId>
			<version>${spring-native.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<classifier>${jar-classifier}</classifier>
					<image>
						<builder>paketobuildpacks/builder:tiny</builder>
						<env>
							<BP_NATIVE_IMAGE>true</BP_NATIVE_IMAGE>
						</env>
					</image>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.experimental</groupId>
				<artifactId>spring-aot-maven-plugin</artifactId>
				<version>${spring-native.version}</version>
				<executions>
					<execution>
						<id>test-generate</id>
						<goals>
							<goal>test-generate</goal>
						</goals>
					</execution>
					<execution>
						<id>generate</id>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<overwrite>true</overwrite>
							<resources>
								<resource>
									<directory>${project.basedir}/function</directory>
									<includes>
										<include>**</include>
									</includes>
								</resource>
							</resources>
							<outputDirectory>
								${project.build.directory}/azure-functions/${functionAppName}
							</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<id>copy-image</id>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<echo message="cat /workspace/${start-class}"
									  file="${project.build.directory}/exec.sh"/>
								<exec executable="docker"
									  outputproperty="container.id">
									<arg value="create"/>
									<arg value="${project.artifactId}:${project.version}"/>
								</exec>
								<exec executable="docker"
									  outputproperty="container.id">
									<arg value="cp"/>
									<arg value="${container.id}:/workspace/${start-class}"/>
									<arg value="${project.build.directory}/azure-functions/${functionAppName}/${start-class}"/>
								</exec>
								<exec executable="docker">
									<arg value="rm"/>
									<arg value="${container.id}"/>
								</exec>
								<!-- mvn azure-functions:deploy requires the jar file even FUNCTIONS_WORKER_RUNTIME is custom. So copy the thin jar to the directory.  -->
								<copy file="${project.build.directory}/${project.build.finalName}.jar.original"
									  tofile="${project.build.directory}/azure-functions/${functionAppName}/${project.build.finalName}.jar"/>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.microsoft.azure</groupId>
				<artifactId>azure-functions-maven-plugin</artifactId>
				<version>1.10.1</version>
				<configuration>
					<resourceGroup>${functionResourceGroup}</resourceGroup>
					<appName>${functionAppName}</appName>
					<region>${functionAppRegion}</region>
					<runtime>
						<os>linux</os>
					</runtime>
					<appSettings>
						<property>
							<name>FUNCTIONS_EXTENSION_VERSION</name>
							<value>~3</value>
						</property>
						<property>
							<name>FUNCTIONS_WORKER_RUNTIME</name>
							<value>custom</value>
						</property>
					</appSettings>
					<disableAppInsights>true</disableAppInsights>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>native</id>
			<properties>
				<jar-classifier>exec</jar-classifier>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.graalvm.nativeimage</groupId>
						<artifactId>native-image-maven-plugin</artifactId>
						<version>21.0.0.2</version>
						<configuration>
							<imageName>${start-class}</imageName>
							<outputDirectory>
								${project.build.directory}/azure-functions/${functionAppName}
							</outputDirectory>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>native-image</goal>
								</goals>
								<phase>package</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<repositories>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</pluginRepository>
	</pluginRepositories>

</project>
